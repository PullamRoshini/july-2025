class Solution(object):
    def findDiagonalOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix or not matrix[0]:
            return []

        m, n = len(matrix), len(matrix[0])
        result = []
        row, col = 0, 0
        direction = 1  # 1 means moving up-right, -1 means down-left

        for _ in range(m * n):
            result.append(matrix[row][col])

            if direction == 1:  # moving up-right
                if col == n - 1:  # hit right boundary
                    row += 1
                    direction = -1
                elif row == 0:  # hit top boundary
                    col += 1
                    direction = -1
                else:  # move up-right
                    row -= 1
                    col += 1
            else:  # moving down-left
                if row == m - 1:  # hit bottom boundary
                    col += 1
                    direction = 1
                elif col == 0:  # hit left boundary
                    row += 1
                    direction = 1
                else:  # move down-left
                    row += 1
                    col -= 1

        return result

